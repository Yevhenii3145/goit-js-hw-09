{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCH,EAAQ,uBAAqBH,QAAiBC,OAE5CG,EAAK,sBAAoBJ,QAAiBC,UAKlD,MAAMM,EAAUC,SAASC,cAAc,SACjCC,EAAWF,SAASC,cAAc,kBAClCE,EAAUH,SAASC,cAAc,iBACjCG,EAAYJ,SAASC,cAAc,mBAMzCF,EAAQM,iBAAiB,UAEzB,SAAWC,GACTA,EAAEC,iBAIF,IAAId,EAAQe,OAAON,EAASO,OAE5B,MAAMC,EAAOF,OAAOL,EAAQM,OACtBE,EAASH,OAAOJ,EAAUK,OAChC,IAAIG,EAAWnB,EAAQiB,EACnBlB,EAAW,EACXqB,EAAU,EACdC,YAAW,KAETvB,EAAcC,EAAUC,GACrBsB,MAAKC,IACJ3B,EAAA4B,OAAOC,QAAQF,MAEhBG,OAAMC,GAAS/B,EAAA4B,OAAOI,QAAQD,KACjCP,GAAW,EACXrB,GAAY,IACXC,GAEH,MAAM6B,EAAQC,aAAY,KACxBC,QAAQC,IAAIf,GACRG,EAAUF,EACZe,cAAcJ,IAIhB/B,EAAcC,EAAUoB,GACrBG,MAAKC,IACJ3B,EAAA4B,OAAOC,QAAQF,MAEhBG,OAAMC,GAAS/B,EAAA4B,OAAOI,QAAQD,KACjCP,GAAW,EACXrB,GAAsB,EACtBoB,GAAsBF,KAErBE","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n}\n\nconst formRef = document.querySelector('.form');\nconst delayRef = document.querySelector('[name=\"delay\"]');\nconst stepRef = document.querySelector('[name=\"step\"]');\nconst amountRef = document.querySelector('[name=\"amount\"]');\n\n// let delay = delayRef.value\n// let step = stepRef.value\n// let amount = amountRef.value\n\nformRef.addEventListener('submit', f);\n\nfunction f(e) {\n  e.preventDefault();\n  // console.log(delayRef.value);\n  // console.log(stepRef.value);\n  // console.log(amountRef.value);\\\n  let delay = Number(delayRef.value);\n  // console.log(delay);\n  const step = Number(stepRef.value);\n  const amount = Number(amountRef.value);\n  let newDelay = delay + step;\n  let position = 1;\n  let counter = 1;\n  setTimeout(() => {\n    // console.log(delay);\n    createPromise(position, delay)\n      .then(result => {\n        Notify.success(result);\n      })\n      .catch(error => Notify.failure(error));\n    counter += 1;\n    position += 1;\n  }, delay);\n\n  const intId = setInterval(() => {\n    console.log(step);\n    if (counter > amount) {\n      clearInterval(intId);\n      return;\n    }\n\n    createPromise(position, newDelay)\n      .then(result => {\n        Notify.success(result);\n      })\n      .catch(error => Notify.failure(error));\n    counter += 1;\n    position = position + 1;\n    newDelay = newDelay + step;\n    // position = i;\n  }, newDelay);\n}\n\n// let newDelay =\n\n//     setTimeout(() => {\n//       // if (counter === amount - 1) {\n//       //   return;\n//       // }\n//       createPromise(position, newDelay)\n//         .then(result => {\n//           Notify.success(result);\n//         })\n//         .catch(error => Notify.failure(error));\n//       counter = counter + 1;\n//       position = position + 1;\n//       newDelay = newDelay + step;\n//     }, newDelay);\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   const promise = new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     }\n//     reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n//   return promise;\n// }\n// const formRef = document.querySelector('.form');\n// const delayRef = document.querySelector('[name=\"delay\"]');\n// const stepRef = document.querySelector('[name=\"step\"]');\n// const amountRef = document.querySelector('[name=\"amount\"]');\n\n// let amount = amountRef.value;\n// // console.log(amount);\n// const currentAmount = null;\n// formRef.addEventListener('submit', constructor);\n// function constructor() {\n//   const firsDal = delayRef.value;\n//   const delay = stepRef.value;\n//   const position = 1;\n//   setTimeout(() => {\n//     // if (currentAmount === amount) {\n//     //   return;\n//     // }\n//     createPromise(position, firsDal)\n//       .then(() => {\n//         console.log(gg);\n//       })\n//       .catch(() => {\n//         console.log(ff);\n//       });\n//     currentAmount += 1;\n//     position += 1;\n//   }, firsDal);\n//   setInterval(() => {\n//     // if (currentAmount === amount) {\n//     //   return;\n//     // }\n//     createPromise(position, delStep)\n//       .then(() => {\n//         console.log(gg);\n//       })\n//       .catch(() => {\n//         console.log(ff);\n//       });\n//   }, delStep);\n// }\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$delayRef","$47d4ff9957288465$var$stepRef","$47d4ff9957288465$var$amountRef","addEventListener","e","preventDefault","Number","value","step","amount","newDelay","counter","setTimeout","then","result","Notify","success","catch","error","failure","intId","setInterval","console","log","clearInterval"],"version":3,"file":"03-promises.5aa4ce52.js.map"}