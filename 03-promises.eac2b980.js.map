{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,I,IADMC,EAAgBC,KAAKC,SAAW,GAC7BC,EAAI,EAAGA,GAAKR,EAAUQ,IAC7BR,EADgCQ,EAEhCC,YAAW,WACLJ,EACFF,EAAQ,uBAAwCO,OAAfV,EAAS,QAAYU,OAANT,EAAM,OAEpDG,EAAK,sBAAuCM,OAAfV,EAAS,QAAYU,OAANT,EAAM,SAErDA,GACHA,GAAgBU,QAKtB,IAAMC,EAAUC,SAASC,cAAc,SACjCC,EAAWF,SAASC,cAAc,kBAClCE,EAAUH,SAASC,cAAc,iBACjCG,EAAYJ,SAASC,cAAc,mBAEzCF,EAAQM,iBAAiB,UAEzB,SAAWC,GACTA,EAAEC,iBAEF,IAAInB,EAAQoB,OAAON,EAASO,OACfD,OAAOL,EAAQM,OACbD,OAAOJ,EAAUK,OAKhCvB,EAHe,EAGSE,GACrBsB,MAAK,SAAAC,GACJ3B,EAAA4B,OAAOC,QAAQF,MAEhBG,OAAM,SAAAC,G,OAAS/B,EAAA4B,OAAOI,QAAQD,S","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    for (let i = 1; i <= position; i++) {\n      position = i;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        } else {\n          reject(`❌ Rejected promise ${position} in ${delay}ms`);\n        }\n      }, delay);\n      delay = delay + step;\n    }\n  });\n}\n\nconst formRef = document.querySelector('.form');\nconst delayRef = document.querySelector('[name=\"delay\"]');\nconst stepRef = document.querySelector('[name=\"step\"]');\nconst amountRef = document.querySelector('[name=\"amount\"]');\n\nformRef.addEventListener('submit', f);\n\nfunction f(e) {\n  e.preventDefault();\n\n  let delay = Number(delayRef.value);\n  const step = Number(stepRef.value);\n  const amount = Number(amountRef.value);\n  let newDelay = delay + step;\n  let position = 0;\n  // let counter = 1;\n\n  createPromise(position, delay)\n    .then(result => {\n      Notify.success(result);\n    })\n    .catch(error => Notify.failure(error));\n  // counter += 1;\n\n  // for (let i = 2; i <= amount; i++) {\n  //   position = i;\n  //   createPromise(position, newDelay)\n  //     .then(result => {\n  //       Notify.success(result);\n  //     })\n  //     .catch(error => Notify.failure(error));\n  //   newDelay = newDelay + step;\n  // }\n}\n\n// let newDelay =\n\n//     setTimeout(() => {\n//       // if (counter === amount - 1) {\n//       //   return;\n//       // }\n//       createPromise(position, newDelay)\n//         .then(result => {\n//           Notify.success(result);\n//         })\n//         .catch(error => Notify.failure(error));\n//       counter = counter + 1;\n//       position = position + 1;\n//       newDelay = newDelay + step;\n//     }, newDelay);\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   const promise = new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     }\n//     reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n//   return promise;\n// }\n// const formRef = document.querySelector('.form');\n// const delayRef = document.querySelector('[name=\"delay\"]');\n// const stepRef = document.querySelector('[name=\"step\"]');\n// const amountRef = document.querySelector('[name=\"amount\"]');\n\n// let amount = amountRef.value;\n// // console.log(amount);\n// const currentAmount = null;\n// formRef.addEventListener('submit', constructor);\n// function constructor() {\n//   const firsDal = delayRef.value;\n//   const delay = stepRef.value;\n//   const position = 1;\n//   setTimeout(() => {\n//     // if (currentAmount === amount) {\n//     //   return;\n//     // }\n//     createPromise(position, firsDal)\n//       .then(() => {\n//         console.log(gg);\n//       })\n//       .catch(() => {\n//         console.log(ff);\n//       });\n//     currentAmount += 1;\n//     position += 1;\n//   }, firsDal);\n//   setInterval(() => {\n//     // if (currentAmount === amount) {\n//     //   return;\n//     // }\n//     createPromise(position, delStep)\n//       .then(() => {\n//         console.log(gg);\n//       })\n//       .catch(() => {\n//         console.log(ff);\n//       });\n//   }, delStep);\n// }\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","i1","setTimeout","concat","step","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$delayRef","$ce04d3a99e08e73b$var$stepRef","$ce04d3a99e08e73b$var$amountRef","addEventListener","e","preventDefault","Number","value","then","result","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.eac2b980.js.map"}